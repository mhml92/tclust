}else{
type <- paste(type,collapse = ",")
}
time_spent <- as.numeric(d[which(d$type == 'time_spent'),]$value)
if(identical(time_spent, character(0))){
rm(d)
rm(type)
rm(time_spent)
}else{
times <- append(times,time_spent)
device <- d$device[1]
formated_data <- rbind(formated_data,data.frame(fid=fid,device=device,time_spent=time_spent,type=type))
rm(d)
rm(type)
rm(time_spent)
rm(device)
}
}
times  <- numeric()
formated_data <- data.frame(fid=numeric(),device=character(),time_spent=numeric(),type=character())
for(fid in fids){
d <- data[which(data$fid == fid),]
type <- unique(d$type)
type <- type[! type %in% c('time_spent','available_resolution','hash')]
if(length(type) > 2){
type <- "all"
}else{
type <- paste(type,collapse = ",")
}
time_spent <- d[which(d$type == 'time_spent'),]$value
if(identical(time_spent, character(0))){
rm(d)
rm(type)
rm(time_spent)
}else{
times <- append(times,time_spent)
device <- d$device[1]
formated_data <- rbind(formated_data,data.frame(fid=fid,device=device,time_spent=as.numeric(time_spent),type=type))
rm(d)
rm(type)
rm(time_spent)
rm(device)
}
}
plot(sort(times))
plot(sort(times),log="y")
plot(sort(as.numeric(times)),log="y")
mobile <- formated_data[which(formated_data$device == 'm'),]
tablet <- formated_data[which(formated_data$device == 't'),]
computer <- formated_data[which(formated_data$device == 'c'),]
ggplot(formated_data,aes(x = factor(type), y = as.numeric(time_spent),color=device)) +
geom_boxplot() + coord_flip()
#rm(formated_data)
ggplot(mobile,aes(x = factor(type), y = as.numeric(time_spent))) +
geom_boxplot() + coord_flip() +
ggtitle("Mobile")
ggplot(tablet,aes(x = factor(type), y = as.numeric(time_spent))) +
geom_boxplot() + coord_flip() +
ggtitle("Tablet")
ggplot(computer,aes(x = factor(type), y = as.numeric(time_spent))) +
geom_boxplot() + coord_flip() +
ggtitle("Computer")
max(times)
max(as.numeric(times))
times[which(1)]
times[which(times > 5000)]
times[which(as.numeric(times( > 5000))]
times[which(as.numeric(times) > 5000)]
times[which(as.numeric(times) > 100000)]
times  <- numeric()
formated_data <- data.frame(fid=numeric(),device=character(),time_spent=numeric(),type=character())
for(fid in fids){
d <- data[which(data$fid == fid),]
type <- unique(d$type)
type <- type[! type %in% c('time_spent','available_resolution','hash')]
if(length(type) > 2){
type <- "all"
}else{
type <- paste(type,collapse = ",")
}
time_spent <- d[which(d$type == 'time_spent'),]$value
if(identical(time_spent, character(0)) || as.numeric(time_spent) > 20000){
rm(d)
rm(type)
rm(time_spent)
}else{
times <- append(times,time_spent)
device <- d$device[1]
formated_data <- rbind(formated_data,data.frame(fid=fid,device=device,time_spent=as.numeric(time_spent),type=type))
rm(d)
rm(type)
rm(time_spent)
rm(device)
}
}
#rm(data)
mobile <- formated_data[which(formated_data$device == 'm'),]
tablet <- formated_data[which(formated_data$device == 't'),]
computer <- formated_data[which(formated_data$device == 'c'),]
ggplot(formated_data,aes(x = factor(type), y = as.numeric(time_spent),color=device)) +
geom_boxplot() + coord_flip()
#rm(formated_data)
ggplot(mobile,aes(x = factor(type), y = as.numeric(time_spent))) +
geom_boxplot() + coord_flip() +
ggtitle("Mobile")
ggplot(tablet,aes(x = factor(type), y = as.numeric(time_spent))) +
geom_boxplot() + coord_flip() +
ggtitle("Tablet")
ggplot(computer,aes(x = factor(type), y = as.numeric(time_spent))) +
geom_boxplot() + coord_flip() +
ggtitle("Computer")
?dbGetQuery
source('~/Dropbox/mto/fingerprint-plot.R', echo=TRUE)
devtools::install_github("RcppCore/Rcpp")
devtools::install_github("rstats-db/DBI")
devtools::install_github("rstats-db/RMySQL")
library(RMySQL)
library(ggplot2)
library(stringr)
#library('dplyr')
rm(list = ls())
library(RMySQL)
library(ggplot2)
library(pracma)
db = dbConnect(MySQL(),
user='mediatru_stats',
password='T@A^EA,Aw.dZ',
host='web87.meebox.net',
dbname="mediatru_stats")
sql <- "
SELECT
fingerprint_data.fingerprint_id     AS fid,
fingerprint_data.type               AS type,
TRIM(fingerprint_data.value)        AS value,
conversion_impression_data.device   AS device
FROM fingerprint_data
LEFT JOIN fingerprint
ON fingerprint_data.fingerprint_id = fingerprint.id
INNER JOIN conversion_impression_data
ON fingerprint.impression_id = conversion_impression_data.click_id
WHERE fingerprint.timestamp > UNIX_TIMESTAMP(STR_TO_DATE('16-03-2016','%d-%m-%Y'))
"
data <- dbGetQuery(db,sql)
all_cons <- dbListConnections(MySQL())
for(con in all_cons){
dbDisconnect(con)
}
fids <- unique(data$fid)
times  <- numeric()
formated_data <- data.frame(fid=numeric(),device=character(),time_spent=numeric(),type=character())
for(fid in fids){
d <- data[which(data$fid == fid),]
type <- unique(d$type)
type <- type[! type %in% c('time_spent','available_resolution','hash')]
if(length(type) > 2){
print(type[type %in% c('webgl','js_fonts','canvas')])
type <- "all"
}else{
type <- paste(type,collapse = ",")
}
time_spent <- d[which(d$type == 'time_spent'),]$value
if(identical(time_spent, character(0)) || as.numeric(time_spent) > 20000){
rm(d)
rm(type)
rm(time_spent)
}else{
times <- append(times,time_spent)
device <- d$device[1]
formated_data <- rbind(formated_data,data.frame(fid=fid,device=device,time_spent=as.numeric(time_spent),type=type))
rm(d)
rm(type)
rm(time_spent)
rm(device)
}
}
#rm(data)
mobile <- formated_data[which(formated_data$device == 'm'),] +scale_x_log10()
tablet <- formated_data[which(formated_data$device == 'flashFontsKeyt'),]
computer <- formated_data[which(formated_data$device == 'c'),]
ggplot(formated_data,aes(x = factor(type), y = as.numeric(time_spent),color=device)) +
geom_boxplot() + coord_flip()
#rm(formated_data)
ggplot(mobile,aes(x = factor(type), y = as.numeric(time_spent))) +
geom_boxplot() + coord_flip() +
ggtitle("Mobile")
ggplot(tablet,aes(x = factor(type), y = as.numeric(time_spent))) +
geom_boxplot() + coord_flip() +
ggtitle("Tablet")
ggplot(computer,aes(x = factor(type), y = as.numeric(time_spent))) +
geom_boxplot() + coord_flip() +
ggtitle("Computer")
#library('dplyr')
source('~/Dropbox/mto/fingerprint-plot.R', echo=TRUE)
all_cons <- dbListConnections(MySQL())
all_cons <- dbListConnections(MySQL())
?RMySQL
?dbGetQuery
dbDisconnect(db)
dbDisconnect(db)
source('~/Dropbox/mto/fingerprint-plot.R', echo=TRUE)
data
mobile <- formated_data[which(formated_data$device == 'm'),]
tablet <- formated_data[which(formated_data$device == 't'),]
computer <- formated_data[which(formated_data$device == 'c'),]
ggplot(formated_data,aes(x = factor(type), y = as.numeric(time_spent),color=device)) +
geom_boxplot() + coord_flip()
#rm(formated_data)
ggplot(mobile,aes(x = factor(type), y = as.numeric(time_spent))) +
geom_boxplot() + coord_flip() +
ggtitle("Mobile")
ggplot(tablet,aes(x = factor(type), y = as.numeric(time_spent))) +
geom_boxplot() + coord_flip() +
ggtitle("Tablet")
ggplot(computer,aes(x = factor(type), y = as.numeric(time_spent))) +
geom_boxplot() + coord_flip() +
ggtitle("Computer")
fids <- unique(data$fid)
times  <- numeric()
formated_data <- data.frame(fid=numeric(),device=character(),time_spent=numeric(),type=character())
for(fid in fids){
d <- data[which(data$fid == fid),]
type <- unique(d$type)
type <- type[! type %in% c('time_spent','available_resolution','hash')]
if(length(type) > 2){
print(type[type %in% c('webgl','js_fonts','canvas')])
type <- "all"
}else{
type <- paste(type,collapse = ",")
}
time_spent <- d[which(d$type == 'time_spent'),]$value
if(identical(time_spent, character(0)) || as.numeric(time_spent) > 20000){
rm(d)
rm(type)
rm(time_spent)
}else{
times <- append(times,time_spent)
device <- d$device[1]
formated_data <- rbind(formated_data,data.frame(fid=fid,device=device,time_spent=as.numeric(time_spent),type=type))
rm(d)
rm(type)
rm(time_spent)
rm(device)
}
}
fids <- unique(data$fid)
times  <- numeric()
formated_data <- data.frame(fid=numeric(),device=character(),time_spent=numeric(),type=character())
for(fid in fids){
d <- data[which(data$fid == fid),]
type <- unique(d$type)
type <- type[! type %in% c('time_spent','available_resolution','hash')]
if(length(type) > 2){
print(type)
print(type[type %in% c('webgl','js_fonts','canvas')])
print("-------------")
type <- "all"
}else{
type <- paste(type,collapse = ",")
}
time_spent <- d[which(d$type == 'time_spent'),]$value
if(identical(time_spent, character(0)) || as.numeric(time_spent) > 20000){
rm(d)
rm(type)
rm(time_spent)
}else{
times <- append(times,time_spent)
device <- d$device[1]
formated_data <- rbind(formated_data,data.frame(fid=fid,device=device,time_spent=as.numeric(time_spent),type=type))
rm(d)
rm(type)
rm(time_spent)
rm(device)
}
}
source('~/Dropbox/mto/fingerprint-plot.R', echo=TRUE)
40000/60
40000/60/60
source('~/Dropbox/mto/fingerprint-plot.R', echo=TRUE)
source('~/Dropbox/mto/fingerprint-plot.R', echo=TRUE)
ggplot(formated_data,aes(x = factor(type), y = as.numeric(time_spent),color=device)) +
geom_boxplot() + coord_flip() + scale_x_log10()
#rm(formated_data)
ggplot(mobile,aes(x = factor(type), y = as.numeric(time_spent))) +
geom_boxplot() + coord_flip() +
ggtitle("Mobile") + scale_x_log10()
ggplot(tablet,aes(x = factor(type), y = as.numeric(time_spent))) +
geom_boxplot() + coord_flip() +
ggtitle("Tablet") + scale_x_log10()
ggplot(computer,aes(x = factor(type), y = as.numeric(time_spent))) +
geom_boxplot() + coord_flip() +
ggtitle("Computer") + scale_x_log10()
ggplot(formated_data,aes(x = factor(type), y = as.numeric(time_spent),color=device)) +
geom_boxplot() + coord_flip() + scale_x_log10()
ggplot(formated_data,aes(x = factor(type), y = as.numeric(time_spent),color=device)) +
geom_boxplot() + coord_flip() + scale_y_log10()
#rm(formated_data)
ggplot(mobile,aes(x = factor(type), y = as.numeric(time_spent))) +
geom_boxplot() + coord_flip() +
ggtitle("Mobile") + scale_y_log10()
ggplot(tablet,aes(x = factor(type), y = as.numeric(time_spent))) +
geom_boxplot() + coord_flip() +
ggtitle("Tablet") + scale_y_log10()
ggplot(computer,aes(x = factor(type), y = as.numeric(time_spent))) +
geom_boxplot() + coord_flip() +
ggtitle("Computer") + scale_y_log10()
source('~/Dropbox/mto/fingerprint-plot.R', echo=TRUE)
source('~/Dropbox/mto/fingerprint-plot.R', echo=TRUE)
40000/1000
9363/21994
db = dbConnect(MySQL(),
user='mediatru_stats',
password='T@A^EA,Aw.dZ',
host='web87.meebox.net',
dbname="mediatru_stats")
sql <- "
SELECT
value,
COUNT(*) as count
FROM fingerprint_data
WHERE type = 'hash'
GROUP BY value
"
data <- dbGetQuery(db,sql)
data
qplot(data,geom = "histogram")
library(ggplot2)
qplot(data,geom = "histogram")
str(data)
qplot(data$count,geom = "histogram")
qplot(data$count,geom = "histogram",log = y)
qplot(data$count,geom = "histogram",log = y)+scale_y_log10()
qplot(data$count,geom = "histogram")+scale_y_log10()
max(data$count)
dbDisconnect(db)
dbDisconnect(db)
db = dbConnect(MySQL(),
user='mediatru_stats',
password='T@A^EA,Aw.dZ',
host='web87.meebox.net',
dbname="mediatru_stats")
sql <- "
SELECT
value,
COUNT(*) as mycount
FROM fingerprint_data
WHERE type = 'hash'
GROUP BY value
"
data <- dbGetQuery(db,sql)
qplot(data$mycount,geom = "histogram")+scale_y_log10()
qplot(data$mycount,geom = "histogram")+scale_x_log10()
ggplot(data, aes(mycount)) +
geom_histogram()
ggplot(data, aes(mycount)) +
geom_histogram() + coord_flip()
library(caret)
caret
caret
library(carat)
library(diamonds)
library(diamond)
library(diamonds)
data(diamonds)
ggplot(diamonds, aes(carat)) +
geom_histogram()
data
diamonds
str(diamonds)
ggplot(diamonds, aes(price)) +
geom_histogram()
ggplot(data, aes(mycount)) +
geom_histogram()
str(data)
ggplot(data, aes(x =factor(value),y=mycount)) +
geom_line()
ggplot(data, aes(x =value,y=mycount)) +
geom_line()
ggplot(data, aes(x =factor(value),y=mycount)) +
ggplot(data, aes(x =factor(value),y=mycount)) +
geom_point()
ggplot(data, aes(x =1:nrow(data),y=mycount)) +
geom_point()
ggplot(data[order(mycount),], aes(x =1:nrow(data),y=mycount)) +
geom_point()
ggplot(data[order(data$mycount),], aes(x =1:nrow(data),y=mycount)) +
geom_point()
dbDisconnect(db)
dbDisconnect(db)
source('~/Dropbox/mto/fingerprint-hist.R', echo=TRUE)
nrows(data)
nrow(data)
sum(data$mycount)
"
SELECT
value                               as hash,
COUNT(*)                            AS hash_count
conversion_impression_data.device   AS device
FROM fingerprint_data
LEFT JOIN fingerprint
ON fingerprint_data.fingerprint_id = fingerprint.id
INNER JOIN conversion_impression_data
ON fingerprint.impression_id = conversion_impression_data.click_id
WHERE type = 'hash' AND fingerprint.timestamp > UNIX_TIMESTAMP(STR_TO_DATE('16-03-2016','%d-%m-%Y')) AND conversion_impression_data.siteID != 1
GROUP BY value
"
data <- dbGetQuery(db,sql)
dbDisconnect(db)
sql <- "
SELECT
value                               as hash,
COUNT(*)                            AS hash_count,
conversion_impression_data.device   AS device
FROM fingerprint_data
LEFT JOIN fingerprint
ON fingerprint_data.fingerprint_id = fingerprint.id
INNER JOIN conversion_impression_data
ON fingerprint.impression_id = conversion_impression_data.click_id
WHERE type = 'hash' AND fingerprint.timestamp > UNIX_TIMESTAMP(STR_TO_DATE('16-03-2016','%d-%m-%Y')) AND conversion_impression_data.siteID != 1
GROUP BY value
"
data <- dbGetQuery(db,sql)
sql <- "
SELECT
value                               as hash,
COUNT(*)                            AS hash_count,
conversion_impression_data.device   AS device
FROM fingerprint_data
LEFT JOIN fingerprint
ON fingerprint_data.fingerprint_id = fingerprint.id
INNER JOIN conversion_impression_data
ON fingerprint.impression_id = conversion_impression_data.click_id
WHERE type = 'hash' AND fingerprint.timestamp > UNIX_TIMESTAMP(STR_TO_DATE('16-03-2016','%d-%m-%Y')) AND conversion_impression_data.siteID != 1
GROUP BY value
"
sql
db = dbConnect(MySQL(),
user='mediatru_stats',
password='T@A^EA,Aw.dZ',
host='web87.meebox.net',
dbname="mediatru_stats")
data <- dbGetQuery(db,sql)
data
computer <- data[which(data$device == 'c'),]
computer
computer <- data[which(data$device == 'c'),]
tablet <- data[which(data$device == 't'),]
mobile <- data[which(data$device == 'm'),]
ggplot(computer[order(data$mycount),], aes(x =1:nrow(data),y=mycount)) +
geom_point()
ggplot(computer[order(computer$mycount),], aes(x =1:nrow(data),y=mycount)) +
geom_point()
computer
ggplot(computer[order(computer$hash_count),], aes(x =1:nrow(computer),y=hash_count)) +
geom_point()
ggplot(tablet[order(tablet$hash_count),], aes(x =1:nrow(tablet),y=hash_count)) +
geom_point()
# mobile
ggplot(mobile[order(mobile$hash_count),], aes(x =1:nrow(mobile),y=hash_count)) +
geom_point()
ggplot(computer[order(computer$hash_count),], aes(x =1:nrow(computer),y=hash_count)) +
geom_point() + ggtitle("Computer")
# COMPUTER
ggplot(computer[order(computer$hash_count),], aes(x =1:nrow(computer),y=hash_count)) +
geom_point() + ggtitle("Computer")
# TABLET
ggplot(tablet[order(tablet$hash_count),], aes(x =1:nrow(tablet),y=hash_count)) +
geom_point()+ggtitle("Tablet")
# mobile
ggplot(mobile[order(mobile$hash_count),], aes(x =1:nrow(mobile),y=hash_count)) +
geom_point()+ggtitle("mobile")
dbDisconnect(db)
plot(log(1:100))
plot(log(0:100))
e
plot(log(exp(1):100))
plot(log(exp(1):1000))
plot(log(exp(1):100000))
plot(log(exp(1):100000),log="y")
plot(log(exp(1):100000),log = "x")
plot(log(exp(1):100000))
plot(log(1:100000))
plot(log(1:100))
plot(log(0.11:100))
plot(log(0.1:100),type = "l"
)
plot(log(0.1:1),type = "l")
plot(log(0:1),type = "l")
plot(log(seq(0,1)),type = "l")
plot(log(seq(0,1,100)),type = "l")
seq(1,10)
seq(1,10,2)
seq(1,10,.2)
plot(log(seq(0,1,.01)),type = "l")
plot(log(seq(0,2,.01)),type = "l")
plot(log(seq(1,2,.01)),type = "l")
plot(log(seq(1,3,.01)),type = "l")
plot(log(seq(exp(1),3,.01)),type = "l")
plot(log(seq(1,3,.01)),type = "l")
plot(log(seq(0,3,.05)),type = "l")
plot(log(seq(0,3,.1)),type = "l")
plot(log(0:10),type = "l")
plot(log(0:10))
exp(1)
setwd("~/Dropbox/Datalogi/Speciale/code/firstDraft/R")
library(ggplot2)
setwd("~/Dropbox/Datalogi/Speciale/code/firstDraft/R")
brown <- read.table(file("../data/brown/sfld_brown_et_al_amidohydrolases_protein_similarities_for_beh"),header = FALSE)
setwd("~/Dropbox/Datalogi/Speciale/code/firstDraft/R")
brown <- read.table(file("../data/brown/sfld_brown_et_al_amidohydrolases_protein_similarities_for_beh"),header = FALSE)
brown <- read.table(file("../data/brown/sfld_brown_et_al_amidohydrolases_protein_similarities_for_beh.txt"),header = FALSE)
brown
unique(brown[,1])
