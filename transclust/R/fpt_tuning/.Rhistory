geom_point(alpha = 0.1)+
scale_y_log10()+
geom_hline(aes(yintercept=0.1))+
#  scale_x_log10() +
geom_smooth()
ggplot(
data = df_res,
aes(x = cc_size,y=time,colour = factor(type))
) +
#geom_boxplot()+
geom_point(alpha = 0.25)+
scale_y_log10()+
scale_x_log10() +
geom_smooth(alpha = 0.25)
ggplot(
data = df_res,
aes(x = cc_size,y=time,colour = factor(type))
) +
#geom_boxplot()+
geom_point(alpha = 0.25)+
geom_hline(aes(yintercept=0.1))+
scale_y_log10()+
scale_x_log10() +
geom_smooth(alpha = 0.25)
df <- read.csv2(
"fpt_test.txt",
sep = ",",
header = T,
dec = ".")
setwd("~/Dropbox/Datalogi/Speciale/repo/transclust/R/fpt_tuning/")
df <- read.csv2(
"fpt_test.txt",
sep = ",",
header = T,
dec = ".")
options("scipen"=999)
force <- cbind(
type = "force",
cc_size = df$cc_size,
conflicting_edges = df$num_conflicting_edges,
time = df$force_time/(1000000000),
cost = df$force_cost,
relative_cost = df$force_relative_cost)
fpt <- cbind(
type = "fpt",
cc_size = df$cc_size,
conflicting_edges = df$num_conflicting_edges,
time = df$fpt_time/(1000000000),
cost = df$fpt_cost,
relative_cost = df$fpt_relative_cost)
df_res <- as.data.frame(rbind(force,fpt),stringsAsFactors = F)
df_res[,c(2:6)] <- sapply(df_res[,c(2:6)],as.numeric)
ggplot(
data = df_res,
aes(x = cc_size,y=time,colour = factor(type))
) +
#geom_boxplot()+
geom_point(alpha = 0.25)+
geom_hline(aes(yintercept=0.1))+
scale_y_log10()+
scale_x_log10() +
geom_smooth(alpha = 0.25)
ggplot(
data = df_res[which(df_res$conflicting_edges <=5000),],
aes(x = conflicting_edges,y=time,colour = factor(type))
) +
#geom_boxplot()+
geom_point(alpha = 0.1)+
scale_y_log10()+
geom_hline(aes(yintercept=0.1))+
#  scale_x_log10() +
geom_smooth()
ggplot(
data = df_res[which(df_res$conflicting_edges <=5000),],
aes(x = conflicting_edges,y=time,colour = factor(type))
) +
#geom_boxplot()+
geom_point(alpha = 0.1)+
scale_y_log10()+
geom_hline(aes(yintercept=1))+
#  scale_x_log10() +
geom_smooth()
source('~/Dropbox/Datalogi/Speciale/repo/transclust/R/fpt_tuning/plot_fpt_tuning.R', echo=TRUE)
ggplot(
data = df_res[which(df_res$conflicting_edges <=50000),],
aes(x = conflicting_edges,y=time,colour = factor(type))
) +
#geom_boxplot()+
geom_point(alpha = 0.1)+
scale_y_log10()+
geom_hline(aes(yintercept=1))+
#  scale_x_log10() +
geom_smooth()
source('~/Dropbox/Datalogi/Speciale/repo/transclust/R/fpt_tuning/plot_fpt_tuning.R', echo=TRUE)
ggplot(
data = df_res,
aes(x = cc_size,y=time,colour = factor(type))
) +
geom_point(alpha = 0.25)+
geom_hline(aes(yintercept=1))+
scale_y_log10()+
scale_x_log10() +
geom_smooth(alpha = 0.25)+
ggtitle("Connected Components size vs. time")
ggplot(
data = df_res[which(df_res$conflicting_edges <=50000),],
aes(x = conflicting_edges,y=time,colour = factor(type))
) +
#geom_boxplot()+
geom_point(alpha = 0.1)+
scale_y_log10()+
geom_hline(aes(yintercept=1))+
#  scale_x_log10() +
geom_smooth()+
ggtitle("Conflicting edges vs. time")
ggplot(
data = df_res,
aes(x = cc_size,y=time,colour = factor(type))
) +
geom_point(alpha = 0.25)+
geom_hline(aes(yintercept=1))+
scale_y_log10()+
#  scale_x_log10() +
geom_smooth(alpha = 0.25)+
ggtitle("Connected Components size vs. time")
ggplot(
data = df_res[which(df_res$conflicting_edges <=50000),],
aes(x = conflicting_edges,y=time,colour = factor(type))
) +
#geom_boxplot()+
geom_point(alpha = 0.1)+
scale_y_log10()+
geom_hline(aes(yintercept=1))+
geom_vline((aes(xintercept=100))
ggplot(
data = df_res[which(df_res$conflicting_edges <=50000),],
aes(x = conflicting_edges,y=time,colour = factor(type))
) +
#geom_boxplot()+
geom_point(alpha = 0.1)+
scale_y_log10()+
geom_hline(aes(yintercept=1))+
geom_vline((aes(xintercept=100))+
#  scale_x_log10() +
geom_smooth()+
ggtitle("Conflicting edges vs. time")
ggplot(
data = df_res[which(df_res$conflicting_edges <=50000),],
aes(x = conflicting_edges,y=time,colour = factor(type))
) +
#geom_boxplot()+
geom_point(alpha = 0.1)+
scale_y_log10()+
geom_hline(aes(yintercept=1))+
geom_vline((aes(xintercept=100)))+
#  scale_x_log10() +
geom_smooth()+
ggtitle("Conflicting edges vs. time")
ggplot(
data = df_res[which(df_res$conflicting_edges <=50000),],
aes(x = conflicting_edges,y=time,colour = factor(type))
) +
#geom_boxplot()+
geom_point(alpha = 0.1)+
scale_y_log10()+
geom_hline(aes(yintercept=1))+
geom_vline((aes(xintercept=100)))+
#  scale_x_log10() +
geom_smooth()+
ggtitle("Conflicting edges vs. time")
ggplot(
data = df_res,
aes(x = cc_size,y=time,colour = factor(type))
) +
geom_point(alpha = 0.25)+
geom_hline(aes(yintercept=1))+
geom_vline((aes(xintercept=100)))+
scale_y_log10()+
#  scale_x_log10() +
geom_smooth(alpha = 0.25)+
ggtitle("Connected Components size vs. time")
ggplot(
data = df_res,
aes(x = cc_size,y=time,colour = factor(type))
) +
geom_point(alpha = 0.25)+
geom_hline(aes(yintercept=1))+
geom_vline((aes(xintercept=200)))+
scale_y_log10()+
#  scale_x_log10() +
geom_smooth(alpha = 0.25)+
ggtitle("Connected Components size vs. time")
source('~/Dropbox/Datalogi/Speciale/repo/transclust/R/fpt_tuning/plot_fpt_tuning.R', echo=TRUE)
ggplot(
data = df_res[which(df_res$conflicting_edges <=50000),],
aes(x = conflicting_edges,y=time,colour = factor(type))
) +
#geom_boxplot()+
geom_point(alpha = 0.1)+
scale_y_log10()+
geom_hline(aes(yintercept=1))+
geom_vline((aes(xintercept=2000)))+
#  scale_x_log10() +
geom_smooth()+
ggtitle("Conflicting edges vs. time")
ggplot(
data = df_res[which(df_res$conflicting_edges <=50000),],
aes(x = conflicting_edges,y=time,colour = factor(type))
) +
#geom_boxplot()+
geom_point(alpha = 0.1)+
scale_y_log10()+
geom_hline(aes(yintercept=1))+
geom_vline((aes(xintercept=5000)))+
#  scale_x_log10() +
geom_smooth()+
ggtitle("Conflicting edges vs. time")
ggplot(
data = df_res[which(df_res$conflicting_edges <=50000),],
aes(x = conflicting_edges,y=cc_size,colour = factor(type))
) +
#geom_boxplot()+
geom_point(alpha = 0.1)+
#scale_y_log10()+
#geom_hline(aes(yintercept=1))+
#geom_vline((aes(xintercept=5000)))+
#  scale_x_log10() +
geom_smooth()+
ggtitle("Conflicting edges vs. cc_size")
ggplot(
data = df_res[which(df_res$conflicting_edges <=50000),],
aes(y = conflicting_edges,x=cc_size,colour = factor(type))
) +
#geom_boxplot()+
geom_point(alpha = 0.1)+
#scale_y_log10()+
#geom_hline(aes(yintercept=1))+
#geom_vline((aes(xintercept=5000)))+
#  scale_x_log10() +
geom_smooth()+
ggtitle("cc_size vs conflict_edges")
ggplot(
data = df_res,
aes(y = conflicting_edges,x=cc_size,colour = factor(type))
) +
#geom_boxplot()+
geom_point(alpha = 0.1)+
#scale_y_log10()+
#geom_hline(aes(yintercept=1))+
#geom_vline((aes(xintercept=5000)))+
#  scale_x_log10() +
geom_smooth()+
ggtitle("cc_size vs conflict_edges")
ggplot(
data = df_res,
aes(y = conflicting_edges,x=cc_size,colour = factor(type))
) +
#geom_boxplot()+
geom_point(alpha = 0.1)+
#scale_y_log10()+
geom_hline(aes(yintercept=5000))+
geom_vline((aes(xintercept=200)))+
#  scale_x_log10() +
geom_smooth()+
ggtitle("cc_size vs conflict_edges")
ggplot(
data = df_res,
aes(y = conflicting_edges,x=cc_size,colour = factor(type))
) +
#geom_boxplot()+
geom_point(alpha = 0.1)+
scale_y_log10()+
geom_hline(aes(yintercept=5000))+
geom_vline((aes(xintercept=200)))+
#  scale_x_log10() +
geom_smooth()+
ggtitle("cc_size vs conflict_edges")
ggplot(
data = df_res,
aes(y = conflicting_edges,x=cc_size,colour = factor(type))
) +
#geom_boxplot()+
geom_point(alpha = 0.1)+
scale_y_log10()+
geom_hline(aes(yintercept=5000))+
geom_vline((aes(xintercept=200)))+
scale_x_log10() +
geom_smooth()+
ggtitle("cc_size vs conflict_edges")
ggplot(
data = df_res[which(df_res$conflicting_edges <=50000),],
aes(x = conflicting_edges,y=time,colour = factor(type))
) +
#geom_boxplot()+
geom_point(alpha = 0.1)+
scale_y_log10()+
geom_hline(aes(yintercept=1))+
geom_vline((aes(xintercept=5000)))+
scale_x_log10() +
geom_smooth()+
ggtitle("Conflicting edges vs. time")
ggplot(
data = df_res[which(df_res$conflicting_edges <=50000),],
aes(x = conflicting_edges,y=time,colour = factor(type))
) +
#geom_boxplot()+
geom_point(alpha = 0.1)+
scale_y_log10()+
geom_hline(aes(yintercept=1))+
geom_vline((aes(xintercept=5000)))+
scale_x_log10() +
geom_smooth()+
ggtitle("Conflicting edges vs. time")
ggplot(
data = df_res,
aes(x = cc_size,y=time,colour = factor(type))
) +
geom_point(alpha = 0.25)+
geom_hline(aes(yintercept=1))+
geom_vline((aes(xintercept=200)))+
scale_y_log10()+
#  scale_x_log10() +
geom_smooth(alpha = 0.25)+
ggtitle("Connected Components size vs. time")
ggplot(
data = df_res,
aes(x = cc_size,y=time,colour = factor(type))
) +
geom_point(alpha = 0.25)+
geom_hline(aes(yintercept=1))+
geom_vline((aes(xintercept=200)))+
scale_y_log10()+
scale_x_log10() +
geom_smooth(alpha = 0.25)+
ggtitle("Connected Components size vs. time")
source('~/Dropbox/Datalogi/Speciale/repo/transclust/R/fpt_tuning/plot_fpt_tuning.R', echo=TRUE)
ggplot(
data = df_res[which(df_res$conflicting_edges <=50000),],
aes(x = conflicting_edges,y=time)
) +
#geom_boxplot()+
geom_point(alpha = 0.1)+
scale_y_log10()+
geom_hline(aes(yintercept=1))+
geom_vline((aes(xintercept=5000)))+
scale_x_log10() +
geom_smooth()+
ggtitle("Conflicting edges vs. time")
ggplot(
data = df_res[which(df_res$conflicting_edges <=50000),],
aes(x = conflicting_edges,y=time)
) +
#geom_boxplot()+
geom_point(alpha = 0.5)+
scale_y_log10()+
geom_hline(aes(yintercept=1))+
geom_vline((aes(xintercept=5000)))+
scale_x_log10() +
geom_smooth()+
ggtitle("Conflicting edges vs. time")
ggplot(
data = df_res[which(df_res$conflicting_edges <=50000),],
aes(x = conflicting_edges,y=time)
) +
#geom_boxplot()+
geom_point(alpha = 0.25)+
scale_y_log10()+
geom_hline(aes(yintercept=1))+
geom_vline((aes(xintercept=5000)))+
scale_x_log10() +
geom_smooth()+
ggtitle("Conflicting edges vs. time")
View(df_res)
View(df_res)
View(df)
View(df)
source('~/Dropbox/Datalogi/Speciale/repo/transclust/R/fpt_tuning/plot_fpt_tuning.R', echo=TRUE)
View(force)
View(force)
source('~/Dropbox/Datalogi/Speciale/repo/transclust/R/fpt_tuning/plot_fpt_tuning.R', echo=TRUE)
View(fpt)
View(fpt)
View(force)
View(force)
source('~/Dropbox/Datalogi/Speciale/repo/transclust/R/fpt_tuning/plot_fpt_tuning.R', echo=TRUE)
View(force)
View(force)
ggplot(
data = df_res,
aes(y = time,x=completeness,colour = factor(type))
) +
#geom_boxplot()+
geom_point(alpha = 0.1)+
#scale_y_log10()+
#geom_hline(aes(yintercept=5000))+
#geom_vline((aes(xintercept=200)))+
#scale_x_log10() +
geom_smooth()+
ggtitle("time vs completeness")
ggplot(
data = df_res,
aes(y = time,x=completeness,colour = factor(type))
) +
#geom_boxplot()+
geom_point(alpha = 0.1)+
scale_y_log10()+
#geom_hline(aes(yintercept=5000))+
#geom_vline((aes(xintercept=200)))+
#scale_x_log10() +
geom_smooth()+
ggtitle("time vs completeness")
ggplot(
data = df_res,
aes(y = cc_size,x=completenes,colour = factor(type))
) +
#geom_boxplot()+
geom_point(alpha = 0.1)+
#scale_y_log10()+
#geom_hline(aes(yintercept=5000))+
#geom_vline((aes(xintercept=200)))+
#scale_x_log10() +
geom_smooth()+
ggtitle("time vs completeness")
ggplot(
data = df_res,
aes(y = cc_size,x=completenes,colour = factor(type))
) +
#geom_boxplot()+
geom_point(alpha = 0.1)+
#scale_y_log10()+
#geom_hline(aes(yintercept=5000))+
#geom_vline((aes(xintercept=200)))+
#scale_x_log10() +
geom_smooth()+
ggtitle("time vs completeness")
ggplot(
data = df_res,
aes(y = cc_size,x=completnes,colour = factor(type))
) +
#geom_boxplot()+
geom_point(alpha = 0.1)+
#scale_y_log10()+
#geom_hline(aes(yintercept=5000))+
#geom_vline((aes(xintercept=200)))+
#scale_x_log10() +
geom_smooth()+
ggtitle("completeness vs cc_size")
ggplot(
data = df_res,
aes(y = time,x=completeness,colour = factor(type))
) +
#geom_boxplot()+
geom_point(alpha = 0.1)+
scale_y_log10()+
#geom_hline(aes(yintercept=5000))+
#geom_vline((aes(xintercept=200)))+
#scale_x_log10() +
geom_smooth()+
ggtitle("time vs completeness")
ggplot(
data = df_res,
aes(y = cc_size,x=completeness,colour = factor(type))
) +
#geom_boxplot()+
geom_point(alpha = 0.1)+
#scale_y_log10()+
#geom_hline(aes(yintercept=5000))+
#geom_vline((aes(xintercept=200)))+
#scale_x_log10() +
geom_smooth()+
ggtitle("completeness vs cc_size")
ggplot(
data = df_res,
aes(y = cc_size,x=completeness,colour = factor(type))
) +
#geom_boxplot()+
geom_point(alpha = 0.1)+
scale_y_log10()+
#geom_hline(aes(yintercept=5000))+
#geom_vline((aes(xintercept=200)))+
#scale_x_log10() +
geom_smooth()+
ggtitle("completeness vs cc_size")
ggplot(
data = df_res,
aes(y = cc_size,x=completeness)
) +
#geom_boxplot()+
geom_point(alpha = 0.1)+
scale_y_log10()+
#geom_hline(aes(yintercept=5000))+
#geom_vline((aes(xintercept=200)))+
#scale_x_log10() +
geom_smooth()+
ggtitle("completeness vs cc_size")
ggplot(
data = df_res,
aes(y = time,x=completeness,colour = factor(type))
) +
#geom_boxplot()+
geom_point(alpha = 0.1)+
scale_y_log10()+
#geom_hline(aes(yintercept=5000))+
#geom_vline((aes(xintercept=200)))+
#scale_x_log10() +
geom_smooth()+
ggtitle("time vs completeness")
source('~/Dropbox/Datalogi/Speciale/repo/transclust/R/fpt_tuning/plot_fpt_tuning.R', echo=TRUE)
View(fpt)
View(fpt)
View(df_res)
View(df_res)
