{
    "collab_server" : "",
    "contents" : "#include \"TransClust.hpp\"\n#include \"ConnectedComponent.hpp\"\n#include \"FindConnectedComponents.hpp\"\n#include \"FORCE.hpp\"\n#include \"FPT.hpp\"\n#include \"ClusteringResult.hpp\"\n#include \"Result.hpp\"\n#include \"DEBUG.hpp\"\n#include <Rcpp.h>\n#include <fstream>\n\nTransClust::TransClust(\n   const std::string& filename,\n   bool use_custom_fallback,\n   double sim_fallback,\n   bool use_custom_range,\n   double th_min,\n   double th_max,\n   double th_step,\n   double p,\n   double f_att,\n   double f_rep,\n   unsigned R,\n   unsigned dim,\n   double start_t,\n   double d_init,\n   double d_maximal,\n   double s_init,\n   double f_s,\n   double fpt_time_limit,\n   double fpt_max_cost,\n   double fpt_step_size,\n   bool disable_force,\n   bool disable_fpt\n)\n   :\n   use_custom_fallback(use_custom_fallback),\n   sim_fallback(sim_fallback),\n   use_custom_range(use_custom_range),\n   threshold_min(th_min),\n   threshold_max(th_max),\n   threshold_step(th_step),\n   p(p),\n   f_att(f_att),\n   f_rep(f_rep),\n   R(R),\n   start_t(start_t),\n   dim(dim),\n   d_init(d_init),\n   d_maximal(d_maximal),\n   s_init(s_init),\n   f_s(f_s),\n   fpt_time_limit(fpt_time_limit),\n   fpt_max_cost(fpt_max_cost),\n   fpt_step_size(fpt_step_size),\n   disable_force(disable_force),\n   disable_fpt(disable_fpt)\n{\n   // Read input similarity file\n   ConnectedComponent sim_matrix(filename,use_custom_fallback,sim_fallback);\n   id2object = sim_matrix.getObjectNames();\n\n   if(!use_custom_range){\n      threshold_min = sim_matrix.getMinSimilarity();\n      threshold_max = sim_matrix.getMaxSimilarity();\n      threshold_step =(std::rint((threshold_max-threshold_min)*100000)/100000)/100;\n   }\n   //std::cout << std::setprecision(std::numeric_limits<double>::digits10 + 1) << threshold_step << std::endl;\n\n   FCC::findConnectedComponents(sim_matrix,ccs,threshold_min);\n}\n\n\nclustering TransClust::cluster()\n{\n\n   Result result(id2object);\n\n   while(!ccs.empty()){\n      ConnectedComponent& cc = ccs.front();\n\n      //LOG_DEBUG << \"Processing ConnectedComponent with id: \" << cc.getId()\n      //<< \" of size: \" << cc.size()\n      //<< \" and threshold: \" << cc.getThreshold() ;\n\n      ClusteringResult cr;\n      // set initial cost to negativ, indicating 'no solution found (yet)'\n      cr.cost = -1;\n\n      // if cc is at least a conflict tripple\n      if(cc.size() > 2){\n         if(!disable_force){\n            /**********************************************************************\n             * Cluster using FORCE\n             *********************************************************************/\n            // init position array\n            std::vector<std::vector<double>> pos;\n            pos.resize(cc.size(), std::vector<double>(dim,0));\n\n            // layout\n            FORCE::layout(\n               cc,\n               pos,\n               p,\n               f_att,\n               f_rep,\n               R,\n               start_t,\n               dim);\n            //FORCE::DEBUG_position(cc,pos,cc.getThreshold());\n            // partition\n            FORCE::partition(cc,pos,cr,d_init,d_maximal,s_init,f_s);\n\n            //LOG_DEBUG << \"FORCE found solution with \" << DEBUG::num_clusters(cr.membership)\n            //<< \" clusters and  cost: \" << cr.cost\n            //<< \", cost should be: \" << DEBUG::calculate_cluster_cost(cc,cr);\n\n         }\n         /**********************************************************************\n          * Cluster using FPT\n          *********************************************************************/\n         if(cr.cost <= fpt_max_cost && !disable_fpt){\n            //LOG_DEBUG << \"Cost small enough to try and solve it with FPT\";\n            //LOG_VERBOSE << \"Clustering cc-\" << cc.getId() << \" with FTP\";\n            // temp hack\n            double tmp_force_cost = cr.cost;\n            FPT fpt(cc,fpt_time_limit,fpt_step_size,cr.cost+1);\n            fpt.cluster(cr);\n\n            // temp hack continued\n            if(cr.cost < 0){\n               cr.cost = tmp_force_cost;\n            }else{\n               //LOG_DEBUG << \"FPT found solution with \"\n               //<< DEBUG::num_clusters(cr.membership)\n               //<< \" clusters and  cost: \" << cr.cost\n               //<< \", cost should be: \" << DEBUG::calculate_cluster_cost(cc,cr);\n            }\n         }\n      }else{\n         //LOG_VERBOSE << \"CC is only one or two nodes\";\n         // cc consist of 1 or 2 nodes and is a cluster\n         cr.cost = 0;\n         cr.membership = std::vector<unsigned>(cc.size(),0);\n      }\n      result.add(cc,cr);\n      //FORCE::DEBUG_linking(res.getClusters(),pos,cc.getThreshold(),cc.getId());\n      double new_threshold = std::rint((cc.getThreshold()+threshold_step)*100000)/100000;\n\n      //LOG_VERBOSE << \"Increasing threshold to \" << new_threshold;\n\n      //std::cout\n      //\t<< \"1 found new threshold: \"\n      //\t<<std::setprecision(std::numeric_limits<double>::digits10 )\n      //\t<<  new_threshold << std::endl;\n\n      //std::cout\n      //\t<< \"2 threshold_max: \"\n      //\t<< std::setprecision(std::numeric_limits<double>::digits10)\n      //\t<< threshold_max << std::endl;\n\n      if(new_threshold <= threshold_max){\n         //std::cout\n         //\t<< std::setprecision(std::numeric_limits<double>::digits10)\n         //\t<< \"3 new threshold: \" << new_threshold << std::endl;\n         FCC::findConnectedComponents(cc,ccs,new_threshold);\n      }\n      ccs.pop();\n   }\n\n   // print vars\n   std::cout << \"// sim_fallback \" << sim_fallback<< std::endl;\n   std::cout << \"// th_min       \" << threshold_min<< std::endl;\n   std::cout << \"// th_max       \" << threshold_max<< std::endl;\n   std::cout << \"// th_step      \" << threshold_step<< std::endl;\n   std::cout << \"// p            \" << p<< std::endl;\n   std::cout << \"// f_att        \" << f_att<< std::endl;\n   std::cout << \"// f_rep        \" << f_rep<< std::endl;\n   std::cout << \"// R            \" << R<< std::endl;\n   std::cout << \"// dim          \" << dim<< std::endl;\n   std::cout << \"// start_t      \" << start_t<< std::endl;\n   std::cout << \"// d_init       \" << d_init<< std::endl;\n   std::cout << \"// d_maximal    \" << d_maximal<< std::endl;\n   std::cout << \"// s_init       \" << s_init<< std::endl;\n   std::cout << \"// f_s          \" << f_s<< std::endl;\n   //result.dump();\n   return result.get();\n}\n",
    "created" : 1473157243563.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1449391228",
    "id" : "1C1C2594",
    "lastKnownWriteTime" : 1473323959,
    "last_content_update" : 1473323959435,
    "path" : "~/Dropbox/Datalogi/Speciale/code/transclustr/src/TransClust.cpp",
    "project_path" : "src/TransClust.cpp",
    "properties" : {
        "docOutlineVisible" : "1",
        "marks" : "<:58,0\n>:58,0"
    },
    "relative_order" : 17,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "cpp"
}